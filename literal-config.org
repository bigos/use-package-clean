* Literal config

  Other examples can be found here
  https://github.com/caisah/emacs.dz
  https://github.com/alhassy/emacs.d



In init.el we alredy have defined ~init-dir~ folder.

** initial

*** define location of Melpa packages

    Define package source

    #+begin_src emacs-lisp
      ;; accessing a package repo over https on Windows may fail, so we can
      ;; fallback to http there
      (if (eq system-type 'windows-nt)
          (add-to-list 'package-archives
                       '("melpa" . "https://melpa.org/packages/") t)
        (add-to-list 'package-archives
                     '("melpa" . "https://melpa.org/packages/") t))

      ;; set package-user-dir to be relative to init.el path
      (setq package-user-dir (expand-file-name "elpa" init-dir))
    #+end_src

*** load use-package

#+begin_src emacs-lisp
  (require 'package)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src

**** bind key

Use package needs ~bind-key~

#+begin_src emacs-lisp
  (use-package bind-key
    :ensure t)
#+end_src


** customize

*** magit

#+begin_src emacs-lisp
;; (use-package magit
;;   :ensure t)
#+end_src

*** helm descbinds

#+begin_src emacs-lisp
  (use-package helm-descbinds
    :ensure t
    :bind ("C-h b" . helm-descbinds))
#+end_src



*** location of customize settings

Config changes made through the customize UI will be stored here

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (ignore-errors (load custom-file)) ;; It may not yet exist.
#+end_src

*** global ato revert

Revert buffers automatically when underlying files are changed externally

#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src



*** which key

#+begin_example emacs-lisp
  (use-package which-key
    :ensure t
    :config
     (which-key-mode +1))
#+end_example


** GUI
*** some shortcuts

#+begin_src emacs-lisp
  ;; Font size
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)

  ;; Window switching. (C-x o goes to the next window)
  (global-set-key (kbd "C-x O") (lambda ()
				  (interactive)
				  (other-window -1))) ;; back one

  ;; toggle menu-bar visibility
  (global-set-key (kbd "<f12>") 'menu-bar-mode)

#+end_src

*** recent files

#+begin_src emacs-lisp
  (use-package recentf
    :ensure nil
    :bind ("s-r" . recentf-open-files)
    :init
    (recentf-mode 1)
    :custom
    (recentf-max-saved-items 500))
#+end_src


*** ace window

#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground
		     :height 3.0
		     :foreground "red")))))
    :bind ("C-x o" . ace-window))
#+end_src

*** y-or-n

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src


*** No splash screen

Don't show splash screen

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src

*** window title

More useful frame title, that show either a file or a buffer name (if the buffer
isn't visiting a file)

#+begin_src emacs-lisp
  (setq frame-title-format
	'("" invocation-name " Experimental - " (:eval (if (buffer-file-name)
							   (abbreviate-file-name (buffer-file-name))
							 "%b"))))
#+end_src

*** mode flashing on overwrite

#+begin_example emacs-lisp
  (defun double-flash-mode-line ()
     (let ((flash-sec (/ 1.0 20)))
       (invert-face 'mode-line)
       (run-with-timer flash-sec nil #'invert-face 'mode-line)
       (run-with-timer (* 2 flash-sec) nil #'invert-face 'mode-line)
       (run-with-timer (* 3 flash-sec) nil #'invert-face 'mode-line)))

  (add-hook 'overwrite-mode-hook #'(lambda () (double-flash-mode-line)))
#+end_example

*** turn off toolbar

#+begin_src emacs-lisp
  (tool-bar-mode -1)
#+end_src


** Lisp

** The end
#+begin_src emacs-lisp
  (message
   "M-x describe-personal-keybindings will show keybindings defined in use-package user configuration.")
#+end_src
